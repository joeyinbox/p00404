/**
 * Creates a Logic Gate Object used as a basis for sub classes
 * 
 * @param	UserInterface(object), logicGate(object), x coordinate(int), y coordinate(int) 
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Chris		19-03-2014	First release	Requirements
 */
function LogicGate(ui, type, x, y) {
	this.ui = ui;
	this.gateType = type;	
	var img = this.ui.getResource(this.gateType);
	this.width = 80;
	this.height = img.height*(this.width/img.width);
	this.input = new InputWire(shift);
	this.output = new OutputWire();
	this.position = {
		"x": x;
		"y": y;
	};
}


/**
 * Draws the core of the gate
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Chris		19-03-2014	First release	Requirements
 */
LogicGate.prototype.drawGate = function() {
	this.ui.context.drawImage(this.ui.getResource(this.gateType),this.position.x,this.position.y, this.width, this.height);
}







/**
 * Draws the core of the gate
 * 
 * @param x coordinate, y coordinate
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Chris		19-03-2014	First release	Requirements
 */
LogicGate.prototype.setPosition = function(x, y) {
	this.x = x;
	this.y = y;
}






/**
 * Returns the position coordinates of a gate
 * 
 * @param	none
 * @return	{x,y}(object)	Coordinates of the gate
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Name		mm-dd-yyyy	First release	Requirements
 */
LogicGate.prototype.getPosition = function() {
	


}
function DualInputGate() {
	// Sub class constructor
}
DualInputGate.prototype = new LogicGate();


DualInputGate.prototype.foo = function() {
	console.log('Dual Input Gate foo!');
}

DualInputGate.prototype.bar = function(parameter) {
	console.log('dual gate baaaaaar: '+parameter);
}
/**
 * Constructor of the AndGate class
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Name		mm-dd-yyyy	First release	Requirements
 */
function AndGate() {
	// Sub class constructor
}
AndGate.prototype = new DualInputGate();


/**
 * Get the resource path of the graphical representation of this gate
 * 
 * @param	none
 * @return	(string)	The resource path
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Name		mm-dd-yyyy	First release	Requirements
 */
AndGate.getResource = function() {
	return "img/gate/and.svg";
}

function NandGate() {
	// Sub class constructor
}
NandGate.prototype = new DualInputGate();

function OrGate() {
	// Sub class constructor
}
OrGate.prototype = new DualInputGate();

function NorGate() {
	// Sub class constructor
}
NorGate.prototype = new DualInputGate();

function XorGate() {
	// Sub class constructor
}
XorGate.prototype = new DualInputGate();

function XnorGate() {
	// Sub class constructor
}
XnorGate.prototype = new DualInputGate();

function SingleInputGate() {
	// Sub class constructor
}
SingleInputGate.prototype = new LogicGate();
function NotGate() {
	// Sub class constructor
}
NotGate.prototype = new SingleInputGate();

function Wire() {
	// class constructor
}
function InputWire() {
	// Sub class constructor
}
InputWire.prototype = new Wire();

function OutputWire() {
	// Sub class constructor
}
OutputWire.prototype = new Wire();

/**
 * Constructor of the UserInterface class
 * Declare all variables and launch resource loading
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
function UserInterface() {
	this.gateList = [];
	this.optionId = [];
	this.resource = [];
	this.resourceLoadedCount = 0;
	this.gateType = [];
	this.error = false;
	
	// Declare all gate types by their class name
	this.gateType.push(AndGate);
	this.gateType.push(AndGate);
	/*this.gateType.push(NandGate);
	this.gateType.push(OrGate);
	this.gateType.push(NorGate);
	this.gateType.push(XorGate);
	this.gateType.push(XnorGate);
	this.gateType.push(NotGate);*/
	
	// Load resources into memory
	this.loadResources();
	
	console.log(this.gateType[0].getResource());
	console.log(this.resource);
}


/**
 * Loads all resources to get ready to reveal the interface
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.loadResources = function() {
	// Get the Logic gates resources through their static method getResource and add them to the resource array
	this.resourceToLoad = this.gateType.length;
	
	for (var i=0; i<this.gateType.length; i++) {
		this.resource[i] = this.preloadImage(this.gateType[i].getResource());
	}
};


/**
 * Preloads an image in cache to be able to use it directly later on
 * 
 * @param	url(string)		url of an image
 * @return	an Image object if the processing was successful, else null
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.preloadImage = function(url) {
	try {
		var img = new Image();
		img.onload = this.resourceLoaded.bind(this);
		img.onerror = this.loadingError.bind(this);
		img.src = url;
		
		// The image has been successfully loaded
		return img;
	} catch (e) {
		this.loadingError();
		
		return null;
	}
};


/**
 * Handle an error during resource loading
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.loadingError = function() {
	if(!this.error) {
		this.error = true;
		alert('error during loading');
	}
};


/**
 * Increments the resourceLoadedCount and check if all resources have been loaded
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.resourceLoaded = function() {
	if(++this.resourceLoadedCount===this.resourceToLoad) {
		// Everything has been loaded
		// Reveal interface
		console.log('reveal interface');
	}
};


/**
 * Add a gate to the interface
 * 
 * @param	type(int)	Type index of the Gate to add
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.addGate = function(type) {
	// Check if the type is known
	if(this.gateType[type]!==undefined) {
		// Create a new Gate of this particular type
		this.gateList.push(new this.gateType[type](this, type, 0, 0));
	}
};


/**
 * Remove a gate from the interface
 * 
 * @param	gate(LogicGate)	LogicGate subclass object to remove
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.removeGate = function(gate) {
	// Check if the gate is known
	var index = this.gateList.indexOf(gate);
	if(index!==-1) {
		// Go through each of its inputs and outputs to unlink them
		gate.unlinkAllWire();
		
		// Then remove the gate from the list
		this.gateList.splice(index, 1);
	}
};


/**
 * Refresh the canvas and re-draw every elements
 * 
 * @param	none
 * @return	void
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.refresh = function() {
	// Clear the canvas
	
	// Re-draw every link
	for(var i=0; i<this.gateList.length; i++) {
		this.gateList[i].output.drawLinks();
	}
	
	// Re-draw every wire and gate
	for(var i=0; i<this.gateList.length; i++) {
		this.gateList[i].drawWires();
		this.gateList[i].drawGate();
	}
}


/**
 * Return the Image object size stored
 * 
 * @param	type(string)	Type of the gate
 * @return	(Image)		Image object of the gate
 *
 * Modification history
 * Version	Modifier	Date		Change			Reason
 * 0.1		Joey		03-19-2014	First release	Requirements
 */
UserInterface.prototype.getResource = function(type) {
	// Check if the type is known
	if(this.gateType[type]!==undefined && this.resource[type]!==undefined) {
		// Create a new Gate of this particular type
		return this.resource[type];
	}
};
function Question() {
	// class constructor
}
function Quiz() {
	// class constructor
}
$(function(){
	
	var test = new UserInterface();
	
});